---
- include_vars: config.yml

- set_fact: cluster="testcluster1"
## here we assume that hostname is like redisdb-mysubcluster1.testcluster.example.com
- set_fact:
    subcluster: "{{ansible_hostname|regex_replace('\\d+$', '')}}"
#

# Setup third-party tools for debugging purpose
- name: Install required packages for Docker repository
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
    state: present

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
    state: present

- name: Install redis-cli and docker
  apt:
    update_cache: yes
    pkg:
      - redis-tools
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - python3-pip

# Special user to identify traffic from sentinel containers and direct it over haproxy
# This adds haproxy to the monitoring chain and failover will be triggered in a case when haproxy on master went down
- user:
    name: sentinel
    comment: "Used to run Redis Sentinel containers"
    uid: 64446
    shell: /usr/sbin/nologin
    group: nogroup
    create_home: no

- name: Copy redis get-master script
  copy: src=../../../scripts/{{item}} dest=/opt/cent/bin/ mode=0755
  with_items:
    - common_redis.py
    - redis-get-master.py

- name: Docker python lib
  pip:
    name: ['docker', 'redis']
    executable: pip3

# Disable Transparent Huge Pages
- name: Inject kernel.mm.transparent_hugepage
  shell: "echo never > /sys/kernel/mm/transparent_hugepage/enabled && touch {{ansible_env.HOME}}/.kernel.mm.transparent_hugepage.never"
  args:
    creates: "{{ansible_env.HOME}}/.kernel.mm.transparent_hugepage.never"

- name: Ensure auditing for processes that start prior to auditd is enabled 1/2 (configure grub)
  replace:
    path: /etc/default/grub
    regexp: 'GRUB_CMDLINE_LINUX_DEFAULT=""'
    replace: 'GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0 transparent_hugepage=never"'
  register: grub

- name: Ensure auditing for processes that start prior to auditd is enabled 2/2 (update initrd image)
  shell: update-grub
  when: grub.changed

# Add reserved ports we use to the ephemeral range
- name: Reserve tcp ports in ephemeral port range
  sysctl: >
    name=net.ipv4.ip_local_reserved_ports
    value="36379-36479,46379-46479,56379-56479"
    state=present
    ignoreerrors=yes

# Enable vm.overcommit_memory, recommended by Redis
- name: Enable vm.overcommit_memory
  sysctl: >
    name=vm.overcommit_memory
    value=1
    state=present
    ignoreerrors=yes

# Increase "net/core" subsys registered per network namespace
- name: Increase net.core.somaxconn
  sysctl: >
    name=net.core.somaxconn
    value=65535
    state=present
    ignoreerrors=yes

#login docker
- name: Log into DockerHub
  docker_login:
    username: "{{ docker_username }}"
    password: "{{ docker_password }}"

# Setup Redis
- name: Pull docker images
  command: docker pull {{item}}
  with_items:
    - redis:{{redis_version}}
    - haproxy:{{haproxy_version}}
  register: docker_pull
  changed_when: '"Downloaded newer image" in docker_pull.stdout'


- include_vars: ./config.yml
- debug:
    var: services
- debug:
    var: cluster
- debug:
    var: subcluster

#  refresh facts
- name: Refresh Facts
  setup:  

# Setup list of services per subcluster
- name: Set service list from default
  set_fact:
    servicelist: "{{ services['cluster'][subcluster]}}"

- name: Set service list for specific database
  set_fact:
    servicelist:
      - key: "{{ db_var }}"
        value: "{{ services[cluster][subcluster][db_var] }}"
  when: db_var is defined

- name: Convert servicelist to dictionary
  set_fact: 
    servicelist: "{{ servicelist | items2dict }}"
  when: db_var is defined

- name: Iterate over services inside the subcluster
  include_tasks: service.yml
  loop: "{{ servicelist }}"
  loop_control:
    loop_var: service_item
  vars:
    service: "{{ service_item.key }}"